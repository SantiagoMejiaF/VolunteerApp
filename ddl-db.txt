-- Creación de esquemas
CREATE SCHEMA IF NOT EXISTS modulo_gestion_usuarios;
CREATE SCHEMA IF NOT EXISTS modulo_gestion_voluntarios;
CREATE SCHEMA IF NOT EXISTS modulo_gestion_organizaciones;
CREATE SCHEMA IF NOT EXISTS modulo_gestion_misiones_y_actividades;

-- Tabla RoleEntity
CREATE TABLE modulo_gestion_usuarios.ROL (
    ID SERIAL PRIMARY KEY,
    TIPO_ROL VARCHAR(22) NOT NULL
);

-- Tabla UserEntity
CREATE TABLE modulo_gestion_usuarios.USUARIO (
    ID SERIAL PRIMARY KEY,
    ROL_ID INTEGER NOT NULL REFERENCES modulo_gestion_usuarios.ROL(ID) ON DELETE CASCADE,
    ESTADO_AUTORIZACION VARCHAR(255) NOT NULL,
    NOMBRE VARCHAR(20),
    APELLIDO VARCHAR(20),
    CORREO VARCHAR(50) UNIQUE NOT NULL,
    IMAGEN VARCHAR(255),
    FECHA_REGISTRO DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS MODULO_GESTION_USUARIOS.NOTIFICACION (
    ID SERIAL PRIMARY KEY,
    TITULO VARCHAR(100) NOT NULL,
    DESCRIPCION VARCHAR(255),
    FECHA_CREACION TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    USUARIO_ID INTEGER NOT null,
    FOREIGN KEY (USUARIO_ID) REFERENCES MODULO_GESTION_USUARIOS.USUARIO (ID)  ON DELETE CASCADE
);

-- Tabla EmergencyInformationEntity
CREATE TABLE modulo_gestion_voluntarios.INFORMACION_EMERGENCIA (
    ID SERIAL PRIMARY KEY,
    NOMBRE VARCHAR(50) NOT NULL,
    APELLIDO VARCHAR(50) NOT NULL,
    TELEFONO VARCHAR(10) NOT NULL,
    CORREO VARCHAR(50) NOT NULL,
    PARENTESCO SMALLINT NOT NULL
);

-- Tabla PersonalInformationEntity
CREATE TABLE modulo_gestion_voluntarios.INFORMACION_PERSONAL (
    ID SERIAL PRIMARY KEY,
    CEDULA VARCHAR(10) UNIQUE NOT NULL,
    DIRECCION VARCHAR(50) NOT NULL,
    AGE INTEGER NOT NULL,
    BORN_DATE DATE NOT NULL,
    TELEFONO VARCHAR(10) NOT null,
    DESCRIPCION_PERSONAL VARCHAR(1000) NOT NULL
);

-- Tabla principal VolunteeringInformationEntity
CREATE TABLE modulo_gestion_voluntarios.INFORMACION_VOLUNTARIADO (
    ID SERIAL PRIMARY KEY,
    HORAS_VOLUNTARIADAS_TOTALES INTEGER NOT NULL,
    TIPO_VOLUNTARIO VARCHAR(10) NOT NULL,
    FECHA_REGISTRO TIMESTAMP NOT NULL
);

-- Tabla para almacenar las actividades completadas
CREATE TABLE modulo_gestion_voluntarios.ACTIVIDADES_COMPLETADAS_VOLUNTARIO (
    INFORMACION_VOLUNTARIADO_ID INTEGER NOT NULL,
    ACTIVIDAD_COMPLETADA INTEGER NOT NULL,
    FOREIGN KEY (INFORMACION_VOLUNTARIADO_ID) REFERENCES modulo_gestion_voluntarios.INFORMACION_VOLUNTARIADO(ID) ON DELETE CASCADE
);

-- Tabla VolunteerEntity
CREATE TABLE modulo_gestion_voluntarios.VOLUNTARIO (
    ID SERIAL PRIMARY KEY,
    USUARIO_ID INTEGER UNIQUE NOT NULL,
    ORGANIZACION_ID INTEGER,
    VISIBILIDAD SMALLINT not null,
    INFORMACION_PERSONAL_ID INTEGER REFERENCES modulo_gestion_voluntarios.INFORMACION_PERSONAL(ID) ON DELETE CASCADE,
    INFORMACION_VOLUNTARIADO_ID INTEGER REFERENCES modulo_gestion_voluntarios.INFORMACION_VOLUNTARIADO(ID) ON DELETE CASCADE,
    INFORMACION_EMERGENCIA_ID INTEGER REFERENCES modulo_gestion_voluntarios.INFORMACION_EMERGENCIA(ID) ON DELETE CASCADE
);

-- Creación de tablas para enums y colecciones
CREATE TABLE modulo_gestion_voluntarios.DIAS_DISPONIBLES_VOLUNTARIO (
    INFORMACION_VOLUNTARIADO_ID INTEGER REFERENCES modulo_gestion_voluntarios.INFORMACION_VOLUNTARIADO(ID),
    DIA VARCHAR(255)
);

CREATE TABLE modulo_gestion_voluntarios.INTERESES_VOLUNTARIO (
    INFORMACION_VOLUNTARIADO_ID INTEGER REFERENCES modulo_gestion_voluntarios.INFORMACION_VOLUNTARIADO(ID),
    INTERESES VARCHAR(255)
);

CREATE TABLE modulo_gestion_voluntarios.HABILIDADES_VOLUNTARIO (
    INFORMACION_VOLUNTARIADO_ID INTEGER REFERENCES modulo_gestion_voluntarios.INFORMACION_VOLUNTARIADO(ID),
    HABILIDADES VARCHAR(255)
);

ALTER SEQUENCE modulo_gestion_voluntarios.informacion_personal_id_seq INCREMENT BY 1;


-- Tabla OrganizationEntity
CREATE TABLE modulo_gestion_organizaciones.ORGANIZACION (
    ID SERIAL PRIMARY KEY,
    USUARIO_ID INTEGER UNIQUE NOT NULL,
    CEDULA_RESPONSABLE VARCHAR(10) UNIQUE NOT NULL,
    TELEFONO_RESPONSABLE VARCHAR(10) NOT NULL,
    NOMBRE_ORGANIZACION VARCHAR(50) NOT NULL,
    TIPO_ORGANIZACION VARCHAR(21),
    SECTOR VARCHAR(50) NOT NULL,
    TIPO_VOLUNTARIADO VARCHAR(21),
    NIT VARCHAR(10) UNIQUE NOT NULL,
    DIRECCION_ORGANIZACION VARCHAR(50) NOT null,
    HORAS_REQUERIDAS_CERTIFICACION INTEGER not NULL,
    DESCRIPCION VARCHAR(100) NOT NULL,
    FECHA_REGISTRO TIMESTAMP NOT NULL
);

-- Crear tabla COORDINADOR_ACTIVIDAD
CREATE TABLE IF NOT EXISTS MODULO_GESTION_MISIONES_Y_ACTIVIDADES.COORDINADOR_ACTIVIDAD (
    ID SERIAL PRIMARY KEY,
    USUARIO_ID INTEGER NOT NULL,
    ORGANIZACION_ID INTEGER,
    CEDULA VARCHAR(200) NOT NULL,
    CELULAR VARCHAR(200) NOT NULL
);

CREATE TABLE IF NOT EXISTS MODULO_GESTION_MISIONES_Y_ACTIVIDADES.ACTIVIDADES_COMPLETADAS_COORDINADOR (
    COORDINADOR_ACTIVIDAD_ID INTEGER NOT NULL,
    ACTIVIDAD_ID INTEGER NOT NULL,
    PRIMARY KEY (COORDINADOR_ACTIVIDAD_ID, ACTIVIDAD_ID),
    FOREIGN KEY (COORDINADOR_ACTIVIDAD_ID) REFERENCES MODULO_GESTION_MISIONES_Y_ACTIVIDADES.COORDINADOR_ACTIVIDAD(ID)
        ON DELETE CASCADE
);


-- Tabla MissionEntity
CREATE TABLE modulo_gestion_misiones_y_actividades.MISION (
    ID SERIAL PRIMARY KEY,
	ORGANIZACION_ID INTEGER,
    TIPO_MISION VARCHAR(15) NOT NULL,
    TITULO VARCHAR(100) NOT NULL,
    DESCRIPCION VARCHAR(1000) NOT NULL,
    FECHA_INICIO DATE NOT NULL,
    FECHA_FIN DATE NOT NULL,
    DEPARTAMENTO VARCHAR(200) NOT NULL,
    VISIBILIDAD VARCHAR(10) NOT NULL,
    ESTADO VARCHAR(12) NOT null,
    FECHA_DE_CREACION TIMESTAMP NOT NULL
);

CREATE TABLE modulo_gestion_misiones_y_actividades.REQUISITOS_REQUERIDOS (
    MISSION_ID INTEGER NOT NULL,
    REQUISITOS VARCHAR(255),
    FOREIGN KEY (MISSION_ID) REFERENCES modulo_gestion_misiones_y_actividades.MISION(ID) ON DELETE CASCADE
);

CREATE TABLE modulo_gestion_misiones_y_actividades.HABILIDADES_REQUERIDAS (
    MISSION_ID INTEGER NOT NULL,
    HABILIDADES VARCHAR(255),
    FOREIGN KEY (MISSION_ID) REFERENCES modulo_gestion_misiones_y_actividades.MISION(ID) ON DELETE CASCADE
);

CREATE TABLE modulo_gestion_misiones_y_actividades.intereses_requeridos (
    mission_id INTEGER NOT NULL,
    intereses VARCHAR(255) NOT NULL CHECK (intereses IN ('EDUCACION','SALUD','MEDIO_AMBIENTE','CULTURA','DEPORTE','SOCIAL','ANIMALISTA','INFANCIA','ADULTOS_MAYORES','DISCAPACIDAD','EMERGENCIA','TECNOLOGIA','OTRO')),
    CONSTRAINT FK_intereses_mission FOREIGN KEY (mission_id) REFERENCES modulo_gestion_misiones_y_actividades.MISION(ID)
);

-- Tabla LIDER_COMUNIDAD
CREATE TABLE MODULO_GESTION_MISIONES_Y_ACTIVIDADES.LIDER_COMUNIDAD (
    ID SERIAL PRIMARY KEY,
    NOMBRE VARCHAR(200) NOT NULL,
    CORREO VARCHAR(200) NOT NULL,
    CELULAR VARCHAR(200) NOT NULL
);

-- Tabla ActivityEntity
CREATE TABLE modulo_gestion_misiones_y_actividades.ACTIVIDAD (
    ID SERIAL PRIMARY KEY,
    MISION_ID INTEGER NOT NULL,
    LIDER_COMUNIDAD_ID INTEGER,
    COORDINADOR_ACTIVIDAD_ID INTEGER not NULL,
    GRUPO_VOLUNTARIO_ID INTEGER NOT NULL,
    TITULO VARCHAR(100) NOT NULL,
    DESCRIPCION VARCHAR(1000),
    FECHA DATE NOT NULL,
    HORA_INICIO TIME NOT NULL,
    HORA_FIN TIME NOT NULL,
    CIUDAD VARCHAR(50) NOT NULL,
    LOCALIDAD VARCHAR(50) NOT NULL,
    DIRECCION VARCHAR(200) NOT NULL,
    NUMERO_VOLUNTARIOS_REQUERIDOS INTEGER NOT NULL,
    HORAS_REQUERIDAS INTEGER NOT NULL,
    ESTADO VARCHAR(30) NOT NULL,
    VISIBILIDAD VARCHAR(8) NOT NULL,
    NUMERO_PERSONAS_BENEFICIADAS INTEGER NOT NULL,
    OBSERVACIONES VARCHAR(1000),
    FOREIGN KEY (LIDER_COMUNIDAD_ID) REFERENCES modulo_gestion_misiones_y_actividades.lider_comunidad(ID)
);


-- Tabla ASISTENCIA
CREATE TABLE MODULO_GESTION_MISIONES_Y_ACTIVIDADES.ASISTENCIA (
    ID SERIAL PRIMARY KEY,
    ACTIVIDAD_ID INTEGER NOT NULL REFERENCES MODULO_GESTION_MISIONES_Y_ACTIVIDADES.ACTIVIDAD(ID),
    VOLUNTARIO_ID INTEGER NOT NULL,
    HORA_INICIO_ASISTENCIA TIME,
    HORA_FIN_ASISTENCIA TIME
);

-- Tabla RESEÑA
CREATE TABLE MODULO_GESTION_MISIONES_Y_ACTIVIDADES.RESENA (
    ID SERIAL PRIMARY KEY,
    ACTIVIDAD_ID INTEGER NOT NULL REFERENCES MODULO_GESTION_MISIONES_Y_ACTIVIDADES.ACTIVIDAD(ID),
    DESCRIPCION VARCHAR(1000) NOT NULL,
    FECHA_CREACION DATE NOT NULL,
    LIKES INTEGER NOT NULL,
    CALIFICACION INTEGER NOT NULL
);

-- Tabla IMAGENES_RESEÑA
CREATE TABLE MODULO_GESTION_MISIONES_Y_ACTIVIDADES.IMAGENES_RESENA (
    RESENA_ID INTEGER REFERENCES MODULO_GESTION_MISIONES_Y_ACTIVIDADES.RESENA(ID),
    IMAGEN_URL VARCHAR(1000)
);

-- Tabla POSTULACION
CREATE TABLE MODULO_GESTION_VOLUNTARIOS.POSTULACION (
    ID INTEGER PRIMARY KEY,
    ESTADO SMALLINT NOT NULL,
    FECHA_INSCRIPCION DATE NOT NULL
);

-- Tabla DATOS_COMPARTIDOS_VOLUNTARIO_ORGANIZACION
CREATE TABLE MODULO_GESTION_VOLUNTARIOS.DATOS_COMPARTIDOS_VOLUNTARIO_ORGANIZACION (
    ID INTEGER PRIMARY KEY,
    HORAS_HECHAS INTEGER NOT NULL,
    HORAS_CERTIFICADAS INTEGER NOT NULL,
    HORAS_MENSUALES INTEGER NOT NULL
);

-- Tabla VOLUNTARIO_ORGANIZACION
CREATE TABLE MODULO_GESTION_VOLUNTARIOS.VOLUNTARIO_ORGANIZACION (
    ID SERIAL PRIMARY KEY,
    VOLUNTARIO_ID INTEGER NOT NULL,
    ORGANIZACION_ID INTEGER NOT NULL
);


-- Tabla GRUPO_VOLUNTARIO
CREATE TABLE MODULO_GESTION_MISIONES_Y_ACTIVIDADES.GRUPO_VOLUNTARIO (
    ID SERIAL PRIMARY KEY,
    ORGANIZACION_ID INTEGER,
    ACTIVIDAD_ID INTEGER,
    NOMBRE VARCHAR(100) NOT NULL,
    CANTIDAD_VOLUNTARIOS_REQUERIDOS INTEGER NOT NULL,
    CANTIDAD_DE_VOLUNTARIOS_ACTUAL INTEGER NOT NULL
);

-- Tabla MIEMBROS_GRUPO_VOLUNTARIO
CREATE TABLE MODULO_GESTION_MISIONES_Y_ACTIVIDADES.MIEMBROS_GRUPO_VOLUNTARIO (
    ID SERIAL PRIMARY KEY,
    GRUPO_ID INTEGER,
    VOLUNTARIO_ID INTEGER NOT NULL
);

-- Agregar claves foráneas para las relaciones
ALTER TABLE MODULO_GESTION_MISIONES_Y_ACTIVIDADES.MIEMBROS_GRUPO_VOLUNTARIO
    ADD CONSTRAINT FK_GRUPO_ID FOREIGN KEY (GRUPO_ID)
    REFERENCES MODULO_GESTION_MISIONES_Y_ACTIVIDADES.GRUPO_VOLUNTARIO(ID);

